// Дано множество из n целых чисел. Поступают запросы — добавить x, удалить x, увеличить все элементы множества на x и проверить, лежит ли x в множестве.
// Ответьте на все вопросы последнего типа.
// Формат входных данных
// Первая строка содержит число n >=1 — изначальное количество элементов в множестве.
// Вторая строка содержит n чисел — сами элементы множества. Гарантируется, что все элементы различны и не превосходят по модулю 10^9.
// Третья строка содержит число q >=1 — количество запросов. Каждая из следующих строк содержит описание запроса:
// 0 x — проверить, лежит ли в множестве x.
// 1 x — увеличить все элементы множества на x.
// 2 x — добавить в множество число (гарантируется, что x не лежит в множестве).
// 3 x — удалить из множества число (гарантируется, что x лежит в множестве).

// Формат выходных данных
// Выведите ответы на все запросы нулевого типа: YES, если x встречается в множестве, и No противном случае.
// Замечание
// В примере изначально множество состоит из элементов 2 и 9. После запроса 1 2 множество состоит из элементов 4 и 9.
// После запроса 2 10 множество состоит из элементов 4,9 и 10. После запроса 3 9 множество состоит из элементов 4, 10.

//Пример 1
// Ввод
// 2
// 2 7
// 15
// 0 2
// 0 7
// 0 5
// 1 2
// 0 4
// 0 9
// 0 7
// 2 10
// 0 8
// 0 9
// 0 10
// 3 9
// 0 4
// 0 9
// 0 10
// Вывод
// Yes
// Yes
// No
// Yes
// Yes
// No
// No
// Yes
// Yes
// Yes
// No
// Yes

import java.util.HashSet;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Four {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        HashSet<Integer> arr = new HashSet<>();

        for (int i = 0; i < n; i++) {
            arr.add(sc.nextInt());
        }
        int k = sc.nextInt();
        for (int i = 0; i < k; i++) {
            int l = sc.nextInt();
            int m = sc.nextInt();
            switch (l) {
                case 0:
                    if (!arr.contains(m)) {
                        System.out.println("NO");
                    } else System.out.println("YES");
                    break;
                case 1:
                    arr = (HashSet<Integer>) arr.stream().map(x -> x + m).collect(Collectors.toSet());
                    break;
                case 2:
                    arr.add(m);
                    break;
                case 3:
                    arr.remove(m);
                    break;
            }
        }
    }
}
